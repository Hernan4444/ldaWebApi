{"version":3,"sources":["config.js","ApiCall/lda.js","Components/App/App.js","registerServiceWorker.js","index.js"],"names":["dotenv","config","backend_page","process","password","ldaEndspoint","sendLDAData","getDataBase","pin","uploadDatabase","sendSeedOrInteractiveData","iterations","mode","alpha","beta","database","topics","nu","seed","form","FormData","append","JSON","stringify","requestOptions","method","body","fetch","concat","then","response","text","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","stop","this","_callee2","_context2","_callee3","_context3","catch","e","_callee4","file","fileName","_context4","mql","window","matchMedia","styles","contentHeaderMenuLink","textDecoration","color","padding","content","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","docked","matches","sidebarOpen","words","useTopics","results","databases","error","loaded","mediaQueryChanged","bind","assertThisInitialized","toggleOpen","onSetOpen","onSetSidebarOpen","_this2","addListener","d","result","parse","console","log","setState","removeListener","open","ev","preventDefault","n","_this3","tmp","i","push","map","react_default","createElement","Card_default","className","key","CardContent_default","Typography_default","variant","component","formik_esm","initialValues","word","onSubmit","values","actions","resetForm","setSubmitting","validate","errors","includes","render","_ref","handleBlur","handleChange","handleSubmit","type","autoComplete","name","onChange","onBlur","value","disabled","Button_default","size","onClick","event","filter","item","_this4","main_page","react_sidebar_esm","sidebar","iteration","data","_ref2","isSubmitting","target","min","domain","Math","floor","data-tip","data-for","dist_default","id","step","_ref3","setFieldValue","currentTarget","files","contentClassName","background","width","minWidth","height","root","overflow","style","renderCards","slice","reverse","resultIndex","length","topic","topicIndex","wordIndex","loading","react_spinners","sizeUnit","Component","Boolean","location","hostname","match","appRouter","BrowserRouter","basename","Components_App_App","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01028e6c.chunk.js","sourcesContent":["import dotenv from 'dotenv'\ndotenv.config()\n\nexport default {\n  \"backend_page\": process.env.REACT_APP_PAGE,\n  \"password\": process.env.REACT_APP_PASSWORD\n};\n","import config from \"../config\";\n\nexport const ldaEndspoint = {\n  sendLDAData,\n  getDataBase,\n  pin,\n  uploadDatabase,\n  sendSeedOrInteractiveData\n};\n\nasync function sendLDAData(iterations, mode, alpha, beta, database, topics) {\n  let form = new FormData();\n  form.append(\"token\", config.password);\n  form.append(\"iterations\", iterations);\n  form.append(\"mode\", mode);\n  form.append(\"alpha\", alpha);\n  form.append(\"database\", database);\n  form.append(\"beta\", beta);\n  form.append(\"topics\", topics);\n\n  const requestOptions = {\n    method: \"POST\",\n    body: form\n  };\n  return fetch(`${config.backend_page}/lda`, requestOptions).then(response =>\n    response.text()\n  );\n}\n\nasync function pin() {\n  const requestOptions = {\n    method: \"POST\"\n  };\n  return fetch(`${config.backend_page}/pin`, requestOptions).then(response =>\n    response.text()\n  );\n}\nasync function getDataBase() {\n  const requestOptions = {\n    method: \"POST\"\n  };\n  return fetch(`${config.backend_page}/database`, requestOptions)\n    .then(response => response.text())\n    .catch(e => {\n      return JSON.stringify([\n        [\"NewGroups.5\", \"New Groups (5 categorías)\"],\n        [\"NewGroups.10\", \"New Groups (10 categorías)\"]\n      ]);\n    });\n}\nasync function uploadDatabase(file, fileName) {\n  let form = new FormData();\n  form.append(\"token\", config.password);\n  form.append(\"file\", file);\n  form.append(\"name\", fileName);\n\n  const requestOptions = {\n    method: \"POST\",\n    body: form\n  };\n  return fetch(`${config.backend_page}/uploadFile`, requestOptions).then(\n    response => response.text()\n  );\n}\n\nfunction sendSeedOrInteractiveData(\n  iterations,\n  mode,\n  alpha,\n  beta,\n  database,\n  topics,\n  nu,\n  seed\n) {\n  let form = new FormData();\n  form.append(\"token\", config.password);\n  form.append(\"iterations\", iterations);\n  form.append(\"mode\", mode);\n  form.append(\"alpha\", alpha);\n  form.append(\"database\", database);\n  form.append(\"beta\", beta);\n  form.append(\"topics\", topics);\n  form.append(\"nu\", nu);\n  form.append(\"seeds\", JSON.stringify(seed));\n  const requestOptions = {\n    method: \"POST\",\n    body: form\n  };\n  return fetch(`${config.backend_page}/lda`, requestOptions).then(response =>\n    response.text()\n  );\n}\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport Sidebar from \"react-sidebar\";\nimport { ldaEndspoint } from \"../../ApiCall/lda\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { ClipLoader } from \"react-spinners\";\nimport ReactTooltip from 'react-tooltip'\n\n\nconst mql = window.matchMedia(`(min-width: 1000px)`);\nconst styles = {\n  contentHeaderMenuLink: {\n    textDecoration: \"none\",\n    color: \"black\",\n    padding: 8\n  },\n  content: {\n    padding: \"16px\"\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      docked: mql.matches,\n      sidebarOpen: true,\n      topics: 5,\n      words: {},\n      useTopics: false,\n      results: [],\n      databases: [],\n      error: null,\n      loaded: false,\n      mode: \"\"\n    };\n    this.mediaQueryChanged = this.mediaQueryChanged.bind(this);\n    this.toggleOpen = this.toggleOpen.bind(this);\n    this.onSetOpen = this.onSetOpen.bind(this);\n\n    this.onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\n  }\n  componentWillMount() {\n    mql.addListener(this.mediaQueryChanged);\n    ldaEndspoint.getDataBase().then( d => {\n      let result = JSON.parse(d);\n      console.log(result)\n      this.setState({ databases:result, loaded: true });\n    });\n  }\n\n  componentWillUnmount() {\n    mql.removeListener(this.mediaQueryChanged);\n  }\n\n  onSetOpen(open) {\n    this.setState({ open });\n  }\n  mediaQueryChanged() {\n    this.setState({\n      docked: mql.matches,\n      open: false\n    });\n  }\n  toggleOpen(ev) {\n    this.setState({ open: !this.state.open });\n\n    if (ev) {\n      ev.preventDefault();\n    }\n  }\n\n  renderCards(n) {\n    let tmp = [];\n    for (let i = 0; i < n; i++) {\n      tmp.push(i);\n    }\n\n    return tmp.map(i => (\n      <Card className=\"card\" key={i}>\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\">\n            {this.state.mode === \"SEEDED\"\n              ? `Seed ${i + 1}`\n              : `Constrain ${i + 1}`}\n          </Typography>\n\n          <Formik\n            initialValues={{ word: \"\" }}\n            onSubmit={(values, actions) => {\n              if (values.word) {\n                let words;\n                words = this.state.words;\n                if (!(i in this.state.words)) {\n                  words[i] = [];\n                }\n\n                words[i].push(values.word);\n                this.setState({ words });\n                actions.resetForm();\n              }\n              actions.setSubmitting(false);\n            }}\n            validate={values => {\n              let errors = {};\n              if (values.word.includes(\" \")) {\n                errors.word = \"La palabra no puede contener espacio.\";\n              }\n              return errors;\n            }}\n            render={({ values, handleBlur, handleChange, handleSubmit }) => (\n              <form onSubmit={handleSubmit}>\n                <div className=\"input\">\n                  <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name=\"word\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.word}\n                    disabled={!this.state.useTopics}\n                  />\n                  <ErrorMessage name=\"word\" component=\"div\" className=\"error\" />\n                </div>\n\n                <button\n                  className=\"button\"\n                  type=\"submit\"\n                  disabled={!this.state.useTopics}\n                >\n                  Agregar palabra\n                </button>\n\n                {this.state.words[i] &&\n                  this.state.words[i].map((word, d) => (\n                    <div key={`${i}-${d}`} className=\"words\">\n                      {word}\n                      <Button\n                        className=\"deleteButton\"\n                        size=\"small\"\n                        onClick={event => {\n                          let words = this.state.words;\n                          words[i] = words[i].filter(item => item !== word);\n                          this.setState({ words });\n                        }}\n                      >\n                        Delete\n                      </Button>\n                    </div>\n                  ))}\n              </form>\n            )}\n          />\n        </CardContent>\n      </Card>\n    ));\n  }\n\n  onSetSidebarOpen(open) {\n    this.setState({ sidebarOpen: open });\n  }\n\n  render() {\n    const main_page = (\n      <Sidebar\n        sidebar={\n          <div className=\"sidebar\">\n            <h3> LDA's configuration </h3>\n\n            <Formik\n              initialValues={{\n                database: \"NewGroups.5\",\n                mode: \"LDA\",\n                iteration: 100,\n                topics: this.state.topics,\n                nu: 1,\n                alpha: 0.1,\n                beta: 0.001\n              }}\n              onSubmit={(values, actions) => {\n                this.setState({ result: [], error: \"\" });\n                if (values.mode !== \"LDA\") {\n                  ldaEndspoint\n                    .sendSeedOrInteractiveData(\n                      values.iteration,\n                      values.mode,\n                      values.alpha,\n                      values.beta,\n                      values.database,\n                      values.topics,\n                      values.nu,\n                      this.state.words\n                    )\n                    .then(d => {\n                      let data = {\n                        \"iteration\": values.iteration,\n                        \"mode\": values.mode,\n                        \"alpha\": values.alpha,\n                        \"beta\": values.beta,\n                        \"database\": values.database,\n                        \"topics\": values.topics,\n                      }\n                      let result = JSON.parse(d);\n                      let results = this.state.results;\n                      if (\"error\" in result) {\n                        this.setState({ error: \"Hubo un error\" });\n                      } else {\n                        data[\"result\"] = result\n                        results.push(data);\n                        this.setState({ results });\n                      }\n                      actions.setSubmitting(false);\n                    });\n                } else {\n                  ldaEndspoint\n                    .sendLDAData(\n                      values.iteration,\n                      values.mode,\n                      values.alpha,\n                      values.beta,\n                      values.database,\n                      values.topics\n                    )\n                    .then(d => {\n                      let data = {\n                        \"iteration\": values.iteration,\n                        \"mode\": values.mode,\n                        \"alpha\": values.alpha,\n                        \"beta\": values.beta,\n                        \"database\": values.database,\n                        \"topics\": values.topics,\n                      }\n                      let result = JSON.parse(d);\n                      let results = this.state.results;\n                      if (\"error\" in result) {\n                        this.setState({ error: \"Hubo un error\" });\n                      } else {\n                        data[\"result\"] = result\n                        results.push(data);\n                        this.setState({ results });\n                      }\n                      actions.setSubmitting(false);\n                    });\n                }\n              }}\n              validate={values => {\n                let errors = {};\n\n                // errors.database = \"as\";\n                return errors;\n              }}\n              render={({\n                values,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting\n              }) => (\n                <form onSubmit={handleSubmit} className=\"form\">\n                  <div className=\"input\">\n                    <label>Database: </label>\n                    <select\n                      name=\"database\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                    >\n                    {this.state.databases.map(d=> (\n\n                      <option key={d[0]} value={d[0]}>\n                        {d[1]}\n                      </option>\n                    ))}\n                    </select>\n                    <ErrorMessage\n                      name=\"database\"\n                      component=\"div\"\n                      className=\"error\"\n                    />\n                  </div>\n\n                  <div className=\"input\">\n                    <label>LDA Model: </label>\n                    <select\n                      name=\"mode\"\n                      onChange={event => {\n                        handleChange(event);\n                        if (event.target.value !== \"LDA\") {\n                          if (event.target.value === \"INTERACTIVE\") {\n                            this.setState({\n                              useTopics: true,\n                              mode: \"INTERACTIVE\"\n                            });\n                          } else {\n                            this.setState({ useTopics: true, mode: \"SEEDED\" });\n                          }\n                        } else {\n                          this.setState({ useTopics: false });\n                        }\n                      }}\n                      onBlur={handleBlur}\n                    >\n                      <option value=\"LDA\">LDA</option>\n                      <option value=\"INTERACTIVE\">Interactive LDA</option>\n                      <option value=\"SEEDED\">Seeded LDA</option>\n                      <option value=\"BOTH\">Seeded and Interactive LDA</option>\n                    </select>\n                    <ErrorMessage\n                      name=\"mode\"\n                      component=\"div\"\n                      className=\"error\"\n                    />\n                  </div>\n                  <div className=\"input\">\n                    <label>Iterations: </label>\n                    <input\n                      type=\"number\"\n                      name=\"iteration\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.iteration}\n                    />\n                    <ErrorMessage\n                      name=\"iteration\"\n                      component=\"div\"\n                      className=\"error\"\n                    />\n                  </div>\n                  <div className=\"input\">\n                    <label>Topics: </label>\n                    <input\n                      type=\"number\"\n                      name=\"topics\"\n                      min={2}\n                      onChange={e => {\n                        const domain = e.target.value;\n                        if (50 > domain > 0 && Math.floor(domain) === +domain) {\n                          this.setState({ topics: domain });\n                          handleChange(e);\n                        }\n                      }}\n                      onBlur={handleBlur}\n                      value={values.topics}\n                    />\n                    <ErrorMessage\n                      name=\"topics\"\n                      component=\"div\"\n                      className=\"error\"\n                    />\n                  </div>\n                  <div className=\"input\">\n                    <label>Alpha: \n                    <span data-tip data-for='alpha'> (?) </span>\n                    <ReactTooltip id='alpha' type='info'>\n                      <span>Explicación alpha</span>\n                    </ReactTooltip>\n                    </label>\n                    <input\n                      type=\"number\"\n                      name=\"alpha\"\n                      min={0}\n                      step={0.001}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.alpha}\n                    />\n                    <ErrorMessage\n                      name=\"alpha\"\n                      component=\"div\"\n                      className=\"error\"\n                    />\n                  </div>\n                  <div className=\"input\">\n                    <label>Beta: \n                    <span data-tip data-for='beta'> (?) </span>\n                    <ReactTooltip id='beta' type='info'>\n                      <span>Explicación beta</span>\n                    </ReactTooltip>\n                    </label>\n                    <input\n                      type=\"number\"\n                      name=\"beta\"\n                      min={0}\n                      step={0.001}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.beta}\n                    />\n                    <ErrorMessage\n                      name=\"beta\"\n                      component=\"div\"\n                      className=\"error\"\n                    />\n                  </div>\n\n                  {(values.mode === \"INTERACTIVE\" ||\n                    values.mode === \"BOTH\") && (\n                    <div className=\"input\">\n                      <label>Nu: \n                      <span data-tip data-for='nu'> (?) </span>\n                      <ReactTooltip id='nu' type='info'>\n                        <span>Explicación nu</span>\n                      </ReactTooltip>\n                      </label>\n                      <input\n                        type=\"number\"\n                        name=\"nu\"\n                        min={0}\n                        step={0.001}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.nu}\n                      />\n                      <ErrorMessage\n                        name=\"nu\"\n                        component=\"div\"\n                        className=\"error\"\n                      />\n                    </div>\n                  )}\n\n                  <button\n                    className=\"button\"\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                  >\n                    Run Topic Model\n                  </button>\n                </form>\n              )}\n            />\n            <h3> Upload Database</h3>\n            <Formik \n          initialValues={{ file: null }}\n          onSubmit={(values, actions) => {\n            if (values.file){\n              ldaEndspoint.uploadDatabase(values.file, values.file.name).then(d => {\n                let result = JSON.parse(d);\n                this.setState({databases:result})\n                actions.setSubmitting(false);\n              })\n              \n            }\n            else{\n              actions.setSubmitting(false);\n            }\n          }} \n          \n          render={({ handleSubmit, setFieldValue, isSubmitting }) => {\n            return (\n              <form onSubmit={handleSubmit}>\n                <div>\n                  <input id=\"file\" name=\"file\" type=\"file\" onChange={(event) => {\n                    setFieldValue(\"file\", event.currentTarget.files[0]);\n                  }} className=\"form-control\" />\n                </div>\n               \n                <button\n                    className=\"button\"\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                  >\n                    Upload File\n                  </button>\n                                </form>\n            );\n          }} />\n\n\n          </div>\n        }\n        docked={this.state.docked}\n        open={this.state.open}\n        onSetOpen={this.onSetOpen}\n        contentClassName={\"content\"}\n        styles={{\n          sidebar: {\n            background: \"#6B818C\",\n            width: \"20%\",\n            minWidth: \"200px\",\n            height: \"100%\"\n          },\n          root: {\n            overflow: \"scroll\"\n          },\n          content: {\n            height: \"100%\"\n          }\n        }}\n      >\n        <div className=\"view\">\n          {!this.state.docked && (\n            <div>\n              <button\n                onClick={this.toggleOpen}\n                style={styles.contentHeaderMenuLink}\n              >\n                Click here to open panel with LDA's configuration\n              </button>\n            </div>\n          )}\n          <h1> Tradicional, Interactive & Seeded LDA</h1>\n\n          {this.state.useTopics && (\n            <div>\n              <p>\n                In this section you can include words in same topics and run LDA\n                like an Semi-supervised model.\n              </p>\n\n              <div className=\"cards-flex\">\n                {this.renderCards(this.state.topics)}\n              </div>\n            </div>\n          )}\n        </div>\n        {!this.state.error && (\n          <div className=\"view\">\n            <h1> Result </h1>\n            {this.state.results.slice(0).reverse().map((data, resultIndex) =>{\n               return (\n                <div className=\"topicResul\" key={resultIndex}>\n                  <h1>\n                    {this.state.results.length - resultIndex < 10 && `Result 0${this.state.results.length - resultIndex}`}\n                    {this.state.results.length - resultIndex >= 10 && `Result ${this.state.results.length - resultIndex}`}\n                  </h1>\n                  <h4>{`Iteracions: ${data.iteration}`}</h4>\n                  <h4>{`Alpha: ${data.alpha}`}</h4>\n                  <h4>{`Beta: ${data.beta}`}</h4>\n                  <h4>{`Topics: ${data.topics}`}</h4>\n                  <h4>{`Mode: ${data.mode}`}</h4>\n                  <h4>{`Database: ${data.database}`}</h4>\n                  {data.result.map((topic, topicIndex) => {\n                    return (\n                      <div key={\"topic_\" + topicIndex}>\n                        {topicIndex + 1 < 10 && `Topic 0${topicIndex + 1}`}\n                        {topicIndex + 1 >= 10 && `Topic ${topicIndex + 1}`}\n                        {topic.map((word, wordIndex) => {\n                          return (\n                            <div\n                              className=\"wordData\"\n                              key={`word_${topicIndex}-${wordIndex}`}\n                            >\n                              {word[0]} - {word[1]}\n                            </div>\n                          );\n                        })}\n                      </div>\n                    );\n                  })}\n                </div>\n              )\n            })}\n          </div>\n        )}\n        {this.state.error && (\n          <div className=\"view\">\n            <h1> Hubo un error con el servidor </h1>\n          </div>\n        )}\n      </Sidebar>\n    );\n\n    const loading = (\n      <div>\n        <div className=\"loading\">\n          <ClipLoader\n            sizeUnit={\"px\"}\n            size={300}\n            color={\"#123abc\"}\n            loading={true}\n          />\n        </div>\n        <div className=\"loading\">Cargando servidor</div>\n      </div>\n    );\n\n    return this.state.loaded ? main_page : loading;\n  }\n}\n\nexport default App;\n","/* eslint-disable */\n\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { unregister } from './registerServiceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst appRouter =\n  <BrowserRouter \n  basename={process.env.PUBLIC_URL}\n  >\n    <div className=\"bgOverlay\">\n      <App />\n    </div>\n  </BrowserRouter>;\n\nReactDOM.render(appRouter, document.getElementById('root'));\nunregister()"],"sourceRoot":""}